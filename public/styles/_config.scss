@import url("https://fonts.googleapis.com/css?family=Lato:300,400|Montserrat:400,500,700&display=swap");

$color-eggplant: #6c465d;
$color-asian-rose: #a95166;
$color-asian-orange: #eb6d3a;
$color-gold: #e1a639;
$color-queen-blue: #386590;
$color-crystal-blue: #60a3b4;

$color-primary: #fefefe;
$color-secondary: $color-queen-blue;
$color-header: #a95166;
$color-dark: #3e3f45;
$color-light: #fefefe;
$color-highlight: $color-asian-rose;
$color-background: #e9f1f3;
$color-white: #ffffff;

.color-scheme-kty {
  color: #3e3f45; /* header */
  color: #fbefd2; /* header: hover */
  color: #386590; /* primary - queen blue */
  color: #a95166; /* hilight - asian rose */
}

$font-primary: "Lato", sans-serif;
$font-header: "Montserrat", sans-serif;
$font-weights: (
  "regular": 400,
  "medium": 500,
  "bold": 700
);

/* Set text color */
@function set-text-color($color) {
  @if (lightness($color) > 40) {
    @return $color-dark;
  } @else {
    @return $color-light;
  }
}

/* LAYOUT */

@mixin flexCenter {
  display: flex;
  justify-content: center;
  // align-items: center;
}

@mixin flexSpaceBetween {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* CUSTOM STYLES */
@mixin mainContainer($max-width) {
  width: $max-width;
  height: 92vh;
  margin: 0 auto;
}

@mixin boxShadow($border-color, $percent) {
  box-shadow: 1px 0px 3px lighten($color-highlight, $percent);
}

/* MEDIA QUERY MIXINS */
// xs: maxWidth: 600px -> Extra small devices (phones, 600px and down)
// sm: minWidth: 600px -> Small devices (portrait tablets and large phones, 600px and up)
// md: minWidth: 768px -> Medium devices (landscape tablets, 768px and up) */
// lg: minWidth: 992px -> Large devices (laptops/desktops, 992px and up) */
// xl: minWidth: 1200px -> Extra large devices (large laptops and desktops, 1200px and up)
$breakpoints: (
  xs: 600px,
  sm: 768px,
  md: 992px,
  lg: 1200px
);

// @include mediaQueryAbove(sm)
@mixin mediaQueryAbove($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin mediaQueryBelow($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin mediaQueryBetween($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

/* TRANSITION & ANIMATION */
@mixin easeOut {
  transition: all 0.5s ease-out;
}

@mixin fadeIn {
  animation: fadeInFrame 0.5s linear;
}

@keyframes fadeInFrame {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@mixin scaleTransform {
  animation: scaleFrame 0.5s linear;
}

@keyframes scaleFrame {
  from {
    transform: scalex(0.95);
  }
  to {
    transform: scalex(1);
  }
}

@mixin background-image($image-url) {
  background: $image-url;
  background-attachment: fixed;
  background-repeat: no-repeat;
  background-size: 100% 100%;
}

@mixin linearGradient2($direction, $color1, $color2) {
  background-image: linear-gradient($direction, $color1, $color2);
}
@mixin linearGradient3($direction, $color1, $color2, $color3) {
  background-image: linear-gradient($direction, $color1, $color2, $color3);
}

@mixin randomLinearGradient() {
  background-image: linear-gradient(
    to bottom right,
    random-color(),
    random-color()
  );
}
@function random-color() {
  @return rgb(random(255), random(255), random(255));
}
